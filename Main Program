/*
    Program for robot which will allow it to navigate a grid, detect white and black cells and avoid the black cells
    and detect obstacle blocks and record all of the their positions into an array representing the grid. It will also print
    to screen a representation of the grid and fill in the 
    
    Date: 26/04/2015
    
    Authors: Daniel Keogh and Arron Kelly
    
    */

#pragma config(Sensor, S1,     sonarSensor,    sensorSONAR)
#pragma config(Sensor, S2,     lightSensor,    sensorLightActive)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//Prototypes
int movement_fxn();
int turning_fxn();

main()
{
	//Assigning variables
    int direct = 2;   //Used for the direction the robot is facing, initial direction being East
                      // 1 = North, 2 = East, 3 = South, 4 = West

    int x_val = 1;     //Used for X-axis values in grid at starting position with it's pointer
    int y_val = 4;     //Used for Y-axis values in grid at starting position with it's pointer

    int blockpose1_x_val = 0;       //Used of the postion of the first block      
    int blockpose1_y_val = 0;

    int blockpose2_x_val = 0;       //Used of the postion of the second block
    int blockpose2_y_val = 0;
    
    int Countvalue = 0;


    //Array used for grid positioning.  1 = white cell, 2 = black cell, 3 = block, 4 = current position
    int array[7][9] ={ { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 },
                       { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 },
                       { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 },
                       { 4 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 },   
                       { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 },			
                       { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 },
                       { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } };
                       
    //Used for greater accuracy in motor movement
    nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;
	nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;

    /*              Movement based on current direction and block detection             */

	switch(direct)
	{
		//If facing North
		case 1:
		{
            //If block is detected
            if(SensorValue(sonarSensor) < 25)			
            {
                //Set values as block location
                blockpose1_x_val = x_val;
                blockpose1_y_val = y_val + 1;
                
                //Set cell as block location
                array[x_val][y_val + 1] = 4;
                
                //[[[Turn and go forwards function here]]]
                
            }//End if
            
            //Else move now
            else 
            {
                //Call movement_fxn()
                int movement_fxn();
                
                //If black cell is detected
                if(cellRead_value = 1)  
                {
                    //Set cell in front of robot as a black cell
                    array[x_val][y_val + 1] = 2;
                    
                    //[[[Randomised turning function here]]]
                    
                }//End if
                
                //Else white cell is detected
                else
                {
                    //Set last cell location as white cell in array
                    array[x_val][y_val - 1] = 1;
                    
                    //Set current cell location as robot location in array
                    array[x_val][y_val] = 4;
                    
                }//End else
                
            }//End else
        
            break;
		}//End case 1
        
        
		//If facing East
		case 2:
		{
            //If block is detected
            if(SensorValue(sonarSensor) < 25)		
            {
                //Set values as block location
                blockpose1_x_val = x_val + 1;
                blockpose1_y_val = y_val;
                
                //Set cell as block location
                array[x_val + 1][y_val] = 4;
                
                //[[[Turn and go forwards function here]]]
                
            }//End if

            //Else move now
            else		
            {
                //Call movement_fxn()
                int movement_fxn();
                
                //If black cell is detected
                if(cellRead_value = 1)  
                {
                    //Set cell in front of robot as a black cell
                    array[x_val + 1][y_val] = 2;
                    
                    //[[[Randomised turning function here]]]
                    
                }//End if
                
                //Else white cell is detected
                else
                {
                    //Set last cell location as white cell in array
                    array[x_val - 1][y_val] = 1;
                    
                    //Set current cell location as robot location in array
                    array[x_val][y_val] = 4;
                    
                }//End else
                
            }//End else
            
			break;
		}//End case 2
        
        
		//If facing South
        case 3:
        {
            //If block is detected
            if(SensorValue(sonarSensor) < 25)	
        	{
                //Set values as block location
        		blockpose1_x_val = x_val;
        		blockpose1_y_val = y_val - 1;
                
                //Set cell as block location
        		array[x_val][y_val - 1] = 4;
                
        		//[[[Turn and go forwards function here]]]
                
            }//End if
            
            //Else move now
        	else			
        	{
                //Call movement_fxn()
                int movement_fxn();
                
                //If black cell is detected
                if(cellRead_value = 1)  
                {
                    //Set cell in front of robot as a black cell
                    array[x_val][y_val - 1] = 2;
                    
                    //[[[Randomised turning function here]]]
                    
                }//End if
                
                //Else white cell is detected
                else
                {
                    //Set last cell location as white cell in array
                    array[x_val][y_val + 1] = 1;
                    
                    //Set current cell location as robot location in array
                    array[x_val][y_val] = 4;
                    
                }//End else
                
        	}//End else
            
            break;
		}//End case 3
        
        
		//If facing West
        case 4:
        {
            //If block is detected
            if(SensorValue(sonarSensor) < 25)
            {
                //Set values as block location
                blockpose1_x_val = x_val - 1;
                blockpose1_y_val = y_val;
                
                //Set cell as block location
                array[x_val - 1][y_val] = 4;
                
                //[[[Turn and go forwards function here]]]
                
            }//End if
            
            //Else move now
            else			
            {
                //Call movement_fxn()
                int movement_fxn();
                
                //If black cell is detected
                if(cellRead_value = 1)  
                {
                    //Set cell in front of robot as a black cell
                    array[x_val - 1][y_val] = 2;
                    
                    //[[[Randomised turning function here]]]
                    
                }//End if
                
                //Else white cell is detected
                else
                {
                    //Set last cell location as white cell in array
                    array[x_val + 1][y_val - 1] = 1;
                    
                    //Set current cell location as robot location in array
                    array[x_val][y_val] = 4;
                    
                }//End else
                
            }//End else
            
            break;
      }//End case 4

	}//End switch


   /*               Turning (for function)            */

   //Turn right
   direct++;
    //{{{Turn right function here}}}
   if(direct == 5)  //Turning West to North correction
   {
       direct = 1;
   }

   //Turn left
   direct--;
   //{{{turn left function here}}}
   if(direct == 0)  //Turning North to West correction
   {
       direct = 4;
   }

}//End main()


//Implement movement_fxn()
int movement_fxn()
{
    int cellRead_value = 0; //Used to tell the main program which cell is read when passed 
                            //back to the main function
                            // 1 = Black cell   2 = White cell
    
	while(cellRead_value == 0)
	{
        
        motor[motorB] = 0;
        motor[motorC] = 0;
        nMotorEncoder[motorB] = 0;

        if(SensorValue(lightSensor) < 35)		//If it runs into a black cell
        {
            //Go back one cell
            while(nMotorEncoder[motorB] > -260)
            {
                motor[motorB] = -25;
                motor[motorC] = -25;
                
            }//End while
                
            //Set blackCell_value to 1 to leave function
            cellRead_value = 1;
            
        }//End if

        else
        {
            //Go forwards one cell
            while(nMotorEncoder[motorB] < 260)
            {
                motor[motorB] = 25;
                motor[motorC] = 25;
                
            }//End while
                
            //Set whiteCell_value to 1 to leave function
            cellRead_value = 2;
        }//End else
    
    }//End while
    
    return(cellRead_value);
    
}//End movement_fxn()


//Implement turning_fxn()
int turning_fxn()
{
    int return_val = 0; //Value used to tell the main function which direction the robot turned
                        // 1 = left turn     2 = right turn
    
    return(return_val);
    
}//End turning_fxn()
